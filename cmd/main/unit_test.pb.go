// Copyright 2020 The Pigweed Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.12.4
// source: unit_test.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestCaseResult int32

const (
	TestCaseResult_SUCCESS TestCaseResult = 0
	TestCaseResult_FAILURE TestCaseResult = 1
	TestCaseResult_SKIPPED TestCaseResult = 2
)

// Enum value maps for TestCaseResult.
var (
	TestCaseResult_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "SKIPPED",
	}
	TestCaseResult_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
		"SKIPPED": 2,
	}
)

func (x TestCaseResult) Enum() *TestCaseResult {
	p := new(TestCaseResult)
	*p = x
	return p
}

func (x TestCaseResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCaseResult) Descriptor() protoreflect.EnumDescriptor {
	return file_unit_test_proto_enumTypes[0].Descriptor()
}

func (TestCaseResult) Type() protoreflect.EnumType {
	return &file_unit_test_proto_enumTypes[0]
}

func (x TestCaseResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCaseResult.Descriptor instead.
func (TestCaseResult) EnumDescriptor() ([]byte, []int) {
	return file_unit_test_proto_rawDescGZIP(), []int{0}
}

type TestCaseDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the test suite to which this test case belongs.
	SuiteName string `protobuf:"bytes,1,opt,name=suite_name,json=suiteName,proto3" json:"suite_name,omitempty"`
	// Name of the test case.
	TestName string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	// Path to the file in which the test case is defined.
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *TestCaseDescriptor) Reset() {
	*x = TestCaseDescriptor{}
	mi := &file_unit_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCaseDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseDescriptor) ProtoMessage() {}

func (x *TestCaseDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_unit_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseDescriptor.ProtoReflect.Descriptor instead.
func (*TestCaseDescriptor) Descriptor() ([]byte, []int) {
	return file_unit_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestCaseDescriptor) GetSuiteName() string {
	if x != nil {
		return x.SuiteName
	}
	return ""
}

func (x *TestCaseDescriptor) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestCaseDescriptor) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type TestCaseExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source code for the expression which was run.
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// The expression with arguments evaluated.
	EvaluatedExpression string `protobuf:"bytes,2,opt,name=evaluated_expression,json=evaluatedExpression,proto3" json:"evaluated_expression,omitempty"`
	// Line number at which the expectation is located.
	LineNumber uint32 `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	// Whether the expectation succeeded.
	Success bool `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TestCaseExpectation) Reset() {
	*x = TestCaseExpectation{}
	mi := &file_unit_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCaseExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExpectation) ProtoMessage() {}

func (x *TestCaseExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_unit_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExpectation.ProtoReflect.Descriptor instead.
func (*TestCaseExpectation) Descriptor() ([]byte, []int) {
	return file_unit_test_proto_rawDescGZIP(), []int{1}
}

func (x *TestCaseExpectation) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *TestCaseExpectation) GetEvaluatedExpression() string {
	if x != nil {
		return x.EvaluatedExpression
	}
	return ""
}

func (x *TestCaseExpectation) GetLineNumber() uint32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *TestCaseExpectation) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type TestRunStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestRunStart) Reset() {
	*x = TestRunStart{}
	mi := &file_unit_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRunStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRunStart) ProtoMessage() {}

func (x *TestRunStart) ProtoReflect() protoreflect.Message {
	mi := &file_unit_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRunStart.ProtoReflect.Descriptor instead.
func (*TestRunStart) Descriptor() ([]byte, []int) {
	return file_unit_test_proto_rawDescGZIP(), []int{2}
}

type TestRunEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed   uint32 `protobuf:"varint,1,opt,name=passed,proto3" json:"passed,omitempty"`
	Failed   uint32 `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	Skipped  uint32 `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Disabled uint32 `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *TestRunEnd) Reset() {
	*x = TestRunEnd{}
	mi := &file_unit_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRunEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRunEnd) ProtoMessage() {}

func (x *TestRunEnd) ProtoReflect() protoreflect.Message {
	mi := &file_unit_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRunEnd.ProtoReflect.Descriptor instead.
func (*TestRunEnd) Descriptor() ([]byte, []int) {
	return file_unit_test_proto_rawDescGZIP(), []int{3}
}

func (x *TestRunEnd) GetPassed() uint32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *TestRunEnd) GetFailed() uint32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *TestRunEnd) GetSkipped() uint32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *TestRunEnd) GetDisabled() uint32 {
	if x != nil {
		return x.Disabled
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Event_TestRunStart
	//	*Event_TestRunEnd
	//	*Event_TestCaseStart
	//	*Event_TestCaseEnd
	//	*Event_TestCaseDisabled
	//	*Event_TestCaseExpectation
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_unit_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_unit_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_unit_test_proto_rawDescGZIP(), []int{4}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetTestRunStart() *TestRunStart {
	if x, ok := x.GetType().(*Event_TestRunStart); ok {
		return x.TestRunStart
	}
	return nil
}

func (x *Event) GetTestRunEnd() *TestRunEnd {
	if x, ok := x.GetType().(*Event_TestRunEnd); ok {
		return x.TestRunEnd
	}
	return nil
}

func (x *Event) GetTestCaseStart() *TestCaseDescriptor {
	if x, ok := x.GetType().(*Event_TestCaseStart); ok {
		return x.TestCaseStart
	}
	return nil
}

func (x *Event) GetTestCaseEnd() TestCaseResult {
	if x, ok := x.GetType().(*Event_TestCaseEnd); ok {
		return x.TestCaseEnd
	}
	return TestCaseResult_SUCCESS
}

func (x *Event) GetTestCaseDisabled() *TestCaseDescriptor {
	if x, ok := x.GetType().(*Event_TestCaseDisabled); ok {
		return x.TestCaseDisabled
	}
	return nil
}

func (x *Event) GetTestCaseExpectation() *TestCaseExpectation {
	if x, ok := x.GetType().(*Event_TestCaseExpectation); ok {
		return x.TestCaseExpectation
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_TestRunStart struct {
	// Unit test run has started.
	TestRunStart *TestRunStart `protobuf:"bytes,1,opt,name=test_run_start,json=testRunStart,proto3,oneof"`
}

type Event_TestRunEnd struct {
	// Unit test run has ended.
	TestRunEnd *TestRunEnd `protobuf:"bytes,2,opt,name=test_run_end,json=testRunEnd,proto3,oneof"`
}

type Event_TestCaseStart struct {
	// Start of a test case.
	TestCaseStart *TestCaseDescriptor `protobuf:"bytes,3,opt,name=test_case_start,json=testCaseStart,proto3,oneof"`
}

type Event_TestCaseEnd struct {
	// End of a test case.
	TestCaseEnd TestCaseResult `protobuf:"varint,4,opt,name=test_case_end,json=testCaseEnd,proto3,enum=pw.unit_test.TestCaseResult,oneof"`
}

type Event_TestCaseDisabled struct {
	// Encountered a disabled test case.
	TestCaseDisabled *TestCaseDescriptor `protobuf:"bytes,5,opt,name=test_case_disabled,json=testCaseDisabled,proto3,oneof"`
}

type Event_TestCaseExpectation struct {
	// Expectation statement within a test case.
	TestCaseExpectation *TestCaseExpectation `protobuf:"bytes,6,opt,name=test_case_expectation,json=testCaseExpectation,proto3,oneof"`
}

func (*Event_TestRunStart) isEvent_Type() {}

func (*Event_TestRunEnd) isEvent_Type() {}

func (*Event_TestCaseStart) isEvent_Type() {}

func (*Event_TestCaseEnd) isEvent_Type() {}

func (*Event_TestCaseDisabled) isEvent_Type() {}

func (*Event_TestCaseExpectation) isEvent_Type() {}

type TestRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to send expectation events for successful checks.
	ReportPassedExpectations bool `protobuf:"varint,1,opt,name=report_passed_expectations,json=reportPassedExpectations,proto3" json:"report_passed_expectations,omitempty"`
	// Optional list of test suites to run.
	TestSuite []string `protobuf:"bytes,2,rep,name=test_suite,json=testSuite,proto3" json:"test_suite,omitempty"`
}

func (x *TestRunRequest) Reset() {
	*x = TestRunRequest{}
	mi := &file_unit_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRunRequest) ProtoMessage() {}

func (x *TestRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_unit_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRunRequest.ProtoReflect.Descriptor instead.
func (*TestRunRequest) Descriptor() ([]byte, []int) {
	return file_unit_test_proto_rawDescGZIP(), []int{5}
}

func (x *TestRunRequest) GetReportPassedExpectations() bool {
	if x != nil {
		return x.ReportPassedExpectations
	}
	return false
}

func (x *TestRunRequest) GetTestSuite() []string {
	if x != nil {
		return x.TestSuite
	}
	return nil
}

var File_unit_test_proto protoreflect.FileDescriptor

var file_unit_test_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x70, 0x77, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x22,
	0x6d, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x22, 0x72, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x45,
	0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xcc, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x77, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x77, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x45, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x77, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x42, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x77, 0x2e, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x77, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x77, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x2a, 0x37, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x32,
	0x48, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x52,
	0x75, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x77, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x70, 0x77, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_unit_test_proto_rawDescOnce sync.Once
	file_unit_test_proto_rawDescData = file_unit_test_proto_rawDesc
)

func file_unit_test_proto_rawDescGZIP() []byte {
	file_unit_test_proto_rawDescOnce.Do(func() {
		file_unit_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_unit_test_proto_rawDescData)
	})
	return file_unit_test_proto_rawDescData
}

var file_unit_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_unit_test_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_unit_test_proto_goTypes = []any{
	(TestCaseResult)(0),         // 0: pw.unit_test.TestCaseResult
	(*TestCaseDescriptor)(nil),  // 1: pw.unit_test.TestCaseDescriptor
	(*TestCaseExpectation)(nil), // 2: pw.unit_test.TestCaseExpectation
	(*TestRunStart)(nil),        // 3: pw.unit_test.TestRunStart
	(*TestRunEnd)(nil),          // 4: pw.unit_test.TestRunEnd
	(*Event)(nil),               // 5: pw.unit_test.Event
	(*TestRunRequest)(nil),      // 6: pw.unit_test.TestRunRequest
}
var file_unit_test_proto_depIdxs = []int32{
	3, // 0: pw.unit_test.Event.test_run_start:type_name -> pw.unit_test.TestRunStart
	4, // 1: pw.unit_test.Event.test_run_end:type_name -> pw.unit_test.TestRunEnd
	1, // 2: pw.unit_test.Event.test_case_start:type_name -> pw.unit_test.TestCaseDescriptor
	0, // 3: pw.unit_test.Event.test_case_end:type_name -> pw.unit_test.TestCaseResult
	1, // 4: pw.unit_test.Event.test_case_disabled:type_name -> pw.unit_test.TestCaseDescriptor
	2, // 5: pw.unit_test.Event.test_case_expectation:type_name -> pw.unit_test.TestCaseExpectation
	6, // 6: pw.unit_test.UnitTest.Run:input_type -> pw.unit_test.TestRunRequest
	5, // 7: pw.unit_test.UnitTest.Run:output_type -> pw.unit_test.Event
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_unit_test_proto_init() }
func file_unit_test_proto_init() {
	if File_unit_test_proto != nil {
		return
	}
	file_unit_test_proto_msgTypes[4].OneofWrappers = []any{
		(*Event_TestRunStart)(nil),
		(*Event_TestRunEnd)(nil),
		(*Event_TestCaseStart)(nil),
		(*Event_TestCaseEnd)(nil),
		(*Event_TestCaseDisabled)(nil),
		(*Event_TestCaseExpectation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_unit_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_unit_test_proto_goTypes,
		DependencyIndexes: file_unit_test_proto_depIdxs,
		EnumInfos:         file_unit_test_proto_enumTypes,
		MessageInfos:      file_unit_test_proto_msgTypes,
	}.Build()
	File_unit_test_proto = out.File
	file_unit_test_proto_rawDesc = nil
	file_unit_test_proto_goTypes = nil
	file_unit_test_proto_depIdxs = nil
}
